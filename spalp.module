<?php

/**
 * @file
 * Contains spalp.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;

use Drupal\spalp\Event\SpalpAppIdsAlterEvent;


/**
 * Implements hook_help().
 */
function spalp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the spalp module.
    case 'help.page.spalp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a way for site managers to configure and serve single-page applications as pages in a Drupal site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function spalp_theme() {
  return [
    'node__applanding' => [
      'template' => 'node--applanding',
      'base hook' => 'node',
    ]
  ];
}

/**
 * Set dynamic allowed values for the app ID field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 */
function spalp_get_app_ids(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {  
  // reset app ids
  $ids = [];
  
  // Instantiate the event and dispatch for changes.
  $event = new SpalpAppIdsAlterEvent($ids);
  $event_dispatcher = \Drupal::service('event_dispatcher');
  $event_dispatcher->dispatch(SpalpAppIdsAlterEvent::EVENT_APP_IDS_ALTER, $event);
  
  // return updated ids from event
  return $event->ids;
}
