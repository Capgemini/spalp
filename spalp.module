<?php

/**
 * @file
 * Contains spalp.module.
 */

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\Entity\Node;

/**
 * Implements hook_help().
 */
function spalp_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the spalp module.
    case 'help.page.spalp':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('This module provides a way for site managers to configure and serve single-page applications as pages in a Drupal site.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function spalp_theme() {
  return [
    'node__applanding' => [
      'template' => 'node--applanding',
      'base hook' => 'node',
    ]
  ];
}

/**
 * Set dynamic allowed values for the app ID field.
 *
 * @param \Drupal\field\Entity\FieldStorageConfig $definition
 *   The field definition.
 * @param \Drupal\Core\Entity\ContentEntityInterface|null $entity
 *   The entity being created if applicable.
 * @param bool $cacheable
 *   Boolean indicating if the results are cacheable.
 *
 * @return array
 *   An array of possible key and value options.
 *
 * @see options_allowed_values()
 */
function spalp_get_app_ids(FieldStorageConfig $definition, ContentEntityInterface $entity = NULL, $cacheable) {

  $ids = [];

  \Drupal::moduleHandler()->alter('spalp_app_ids', $ids);
  return array_combine($ids, $ids);
}

/**
 * Implements hook_modules_installed().
 */
function spalp_modules_installed($modules) {
  $module_list = system_rebuild_module_data();

  foreach ($modules as $module) {
    // Does the module have a dependency on spalp?
    $dependencies = array_keys($module_list[$module]->requires);
    if (in_array('spalp', $dependencies)) {
      spalp_create_nodes($module);
    }
  }
}

/**
 * Create applanding nodes in each language when a module is enabled.
 *
 * @param string $module
 *   The machine name of the module being installed.
 *
 * @throws \Drupal\Core\Entity\EntityStorageException
 */
function spalp_create_nodes($module) {
  // TODO: get config from YAML.
  // TODO: translate the node.

  $title = \Drupal::moduleHandler()->getName($module);

  $node = Node::create(['type' => 'applanding']);
  $node->set('title', $title);
  $node->set('field_spalp_app_id', $module);
  // The node should initially be unpublished.
  $node->status = 0;
  $node->enforceIsNew();
  $node->save();

  \Drupal::messenger()->addMessage(t('Node @nid has been created for @title', [
    '@title' => $title,
    '@nid' => $node->id(),
  ]));
}
